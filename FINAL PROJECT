// Samantha Hangsan
// ID: 900029599
// CS 939 
// FINAL PROJECT

/*//////////////////////////////////////////////////////////////////////////////////////////////
PROJECT SPECS:

The purpose of this project is to take your Midterm project  and  implement it using Random Access Binary Files.
As you recall, the Midterm project used text files to store the data. Here in the final exam project,
you will be storing the data in Random Access Binary File.

Also, in the Midterm project you used Arrays to temporarily hold the data in the memory until the user
decides to write the data to file. Here you will NOT be using Arrays and instead writing the
data directly to Random Access Binary File(This is a must).
Please read the chapter Advance File and I/O operations
before attempting this.

Here is the full description of the Final exam project.

Modify your Midterm Exam Project to:

1. Replace  Employee and Department classes with Employee and Department Structures.

2. Inside each structure, replace all string variables with  array of characters.

3. Make Employee and Department editable. That means, the user should be able to edit a given Employee and Department.

4. Do not allow the user to edit the Employee ID and Department ID.

5. Use Random Access Files to store the data in Binary Form. This means, you should not use an Arrays to
store the data in the memory. Instead, when the user wants to create a new Employee/Department,
you write it to the file right away. Also when the user says he/she wants to edit
an Employee/Department, ask the user to enter EmployeeID/DepartmentID.
Read the data from the file and display it to the user.
Allow the user to enter new data and write it back to the file in the same position inside the file.
Please read the chapter . Advance File/IO operations which has examples on how to do this.

//////////////////////////////////////////////////////////////////////////////////////////////*/


#include <iostream>
#pragma warning(disable:4996)
#include <cstring>
#include <string>
#include <iomanip>
#include <fstream>
#include <limits>
#include <stdlib.h> /* exit, EXIT_FAILURE */
using namespace std;

const int MAX_DEPT = 3, MAX_EMPLOYEE = 7;
const int ID_SIZE = 20, NAME_SIZE = 50;

///* --------------------------------------------DEPARTMENT STRUCTURE-------------------------------------------- *///
struct Department
{
	char departmentID[ID_SIZE];
	char departmentName[NAME_SIZE];
	char departmentHeadName[NAME_SIZE];
};

///* --------------------------------------------EMPLOYEE STRUCTURE-------------------------------------------- *///
struct Employee
{
	char employeeID[ID_SIZE];
	char employeeName[NAME_SIZE];
	double employeeSalary;
	int employeeAge;
	char employeeDepartmentID[ID_SIZE];
};

/* --------------------------------------------CLIENT PROGRAM-------------------------------------------- */

// GENERAL PROTOTYPES 
void displayMenu();
void chooseOption(Department& departmentInfo, Department* departmentPointer, int& currentDept, Employee& employeeInfo, Employee* employeePointer, int& currentEmpl);

// DEPARTMENT PROTOTYPES
void countDpts(Department departmentInfo, int& currentDept);
void createDepartment(Department& departmentInfo, Department* departmentPointer, const int currentDept);
void checkDptID(Department& departmentInfo, Department* departmentPointer, const int currentDept);
void editDepartment(Department& departmentInfo, Department* departmentPointer, const int currentDept);
void departmentRecords(Department departmentInfo, const int currentDept);

// EMPLOYEE PROTOTYPES
void countEmpl(Employee employeeInfo, int& currentEmpl);
void createEmployee(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl, Department& departmentInfo, Department* departmentPointer, const int currentDept);
void checkEmplID(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl);
void checkEmplDptID(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl, Department& departmentInfo, Department* departmentPointer, const int currentDept);
void editEmployee(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl, const int currentDept);
void employeeRecords(Employee employeeInfo, const int currentEmpl);			// ALL EMPLOYEE RECORDS

// SALARY REPORT
void salaryReport(Department departmentInfo, Employee employeeInfo, const int currentDept, const int currentEmpl);

int main()
{
	char anotherOption;
	//char quitProgram;
	int currentDept = 0;
	int currentEmpl = 0;

	Department departmentInfo = { "N/A", "N/A", "N/A" };
	Department* departmentPointer;
	departmentPointer = &departmentInfo;
	// determine how many departments are already in the file
	countDpts(departmentInfo, currentDept);
	
	Employee employeeInfo = { "N/A", "N/A", 0, 0, "N/A" };
	Employee* employeePointer;
	employeePointer = &employeeInfo;
	// determine how many employees are already in the file
	countEmpl(employeeInfo, currentEmpl);
	
	cout << "Choose from the menu below using options 1 through 6. \n\n";
	do
	{
		displayMenu();
		chooseOption(departmentInfo, departmentPointer, currentDept, employeeInfo, employeePointer, currentEmpl);

		cout << "Would you like to select another option? Enter Y for yes or N for no: ";
		cin >> anotherOption;

		while (anotherOption != 'Y' && anotherOption != 'y' && anotherOption != 'N' && anotherOption != 'n')
		{
			cout << "Press Y for yes or N for No: ";
			cin >> anotherOption;
		}
		cout << endl;
	} while (anotherOption != 'N' && anotherOption != 'n');

	system("pause");
	return 0;
}


/* --------------------------------------------DISPLAY MENU OPTIONS-------------------------------------------- */
void displayMenu()
{
	cout << "MENU\n";
	cout << "----\n";
	cout << "1. Create Department\n";
	cout << "2. Create Employee\n";
	cout << "3. Edit Department\n";
	cout << "4. Edit Employee\n";
	cout << "5. Display Departments\n";
	cout << "6. Display Employees\n";
	cout << "7. Display Salary Report\n";
	cout << "8. Quit the Program\n";
	cout << "----\n";
}

void chooseOption(Department& departmentInfo, Department* departmentPointer, int& currentDept, Employee& employeeInfo, Employee* employeePointer, int& currentEmpl)
{
	int choice;
	cout << "Enter selection: ";
	cin >> choice;

	switch (choice)
	{
	case 1:			// CREATE DEPARTMENT
	{
		if (currentDept < MAX_DEPT)				// number of stored items (max is 3)
		{
			createDepartment(departmentInfo, departmentPointer, currentDept);
			currentDept++;
		}
		else
		{	cout << "\nYou have reached the maximum number of departments that can be created!\n";
			cout << "You may select option 3 to \"Edit a Department\" or option 5 to \"View Existing Departments\".\n\n";
		}
		break;
	}
	case 2:			// CREATE EMPLOYEE
	{
		if (currentEmpl < MAX_EMPLOYEE)			// number of stored items (max is 7)
		{
			createEmployee(employeeInfo, employeePointer, currentEmpl, departmentInfo, departmentPointer, currentDept);	
			currentEmpl++;
		}
		else
		{
			{	
			cout << "\nYou have reached the maximum number of employees that can be created!\n";
			cout << "You may select option 4 to \"Edit an Employee\" or option 6 to \"View Existing Employees\".\n\n";
			}
		}
		break;
	}
	case 3:			// EDIT DEPARTMENT
	{
		editDepartment(departmentInfo, departmentPointer, currentDept);
		break;
	}
	case 4:		// EDIT EMPLOYEE	
	{
		editEmployee(employeeInfo, employeePointer, currentEmpl, currentDept);
		break;
	}
	case 5:			// DISPLAY DEPARTMENTS
	{
		departmentRecords(departmentInfo, currentDept);
		break;
	}
	case 6:			// DISPLAY EMPLOYEES
	{
		employeeRecords(employeeInfo, currentEmpl);
		break;
	}
	case 7:			// DISPLAY REPORT
	{
		salaryReport(departmentInfo, employeeInfo, currentDept, currentEmpl);
		break;
	}
	case 8:			// QUIT PROGRAM
	{
		char quit;
		cout << "\nAre you sure you want to exit? Enter Y for yes or N for no: ";
		cin >> quit;

		while (quit != 'Y' && quit != 'y' && quit != 'N' && quit != 'n')
		{
			cout << "Press Y for yes or N for No: ";
			cin >> quit;
		}

		if (quit == 'Y' || quit == 'y')
		{
			cout << "The program will now exit.\n";
			exit(EXIT_SUCCESS);
		}
		else
			break;

	}
	// INPUT VALIDATION: only accept valid menu choices 
	default:
	{
		cout << "\nSelect a valid option.\n";
		break;
	}
	}
}

/*////////////////////////////////////////////////////////////////
DEPARTMENTS
////////////////////////////////////////////////////////////////*/

/* --------------------------------------------DETERMINE NUMBER OF DEPARTMENTS IN FILE-------------------------------------------- */
void countDpts(Department departmentInfo, int& currentDept)
{
	int numOfDept = 0;

	// open file for binary reading 
	fstream readFile("departments.dat", ios::in | ios::binary);
	// check for existing file
	if (!readFile)
	{
		currentDept = 0;
	}

	else
	{
		// DEPARTMENT RECORDS
		readFile.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
		while (!readFile.eof())
		{

			readFile.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
			numOfDept++;
		}
		currentDept = numOfDept;
	}

	readFile.close();
}

/* --------------------------------------------1.) CREATE DEPARTMENT-------------------------------------------- */
void createDepartment(Department& departmentInfo, Department* departmentPointer, const int currentDept)
{
	string input;		// used to read strings

						// create Department file object and open file
	fstream createDpt("departments.dat", ios::out | ios::app | ios::binary);			// if file does not exist, empty file of given name is created
	if (!createDpt)
	{
		cout << "Error opening file. Program will now abort.";
		exit(EXIT_FAILURE);
	}

	// collect all information about a department

	cout << "\n\n---CREATE A DEPARTMENT---\n";
	cout << "Please fill out the following information for the department." << endl;
	cout << "Department ID: ";
	cin.ignore();
	getline(cin, input);
	strcpy(departmentPointer->departmentID, input.c_str());

	/// make sure departmentID does NOT already exist 
	// IF it does NOT, insert Department object into the file
	if (currentDept != 0)
	{
		checkDptID(departmentInfo, departmentPointer, currentDept);
	}

	//createDpt.seekg(0, ios::cur);								// sets position in input sentence
	// if id is good, continue and create object in array
	cout << "Department Name: ";
	getline(cin, input);
	strcpy(departmentPointer->departmentName, input.c_str());

	cout << "Name of the Head of the Department: ";
	getline(cin, input);
	strcpy(departmentPointer->departmentHeadName, input.c_str());

	createDpt.write(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
	createDpt.close();

	cout << endl;
}

void checkDptID(Department& departmentInfo, Department* departmentPointer, const int currentDept)
{
	Department checkID = { "N/A", "N/A", "N/A" };
	string input;		// used to read strings
	int deptIndex = 0;	// number of previous departments before the one being created


						// open file for binary reading 
	fstream dptRecords("departments.dat", ios::in | ios::out | ios::binary);
	// check for valid file
	if (!dptRecords)
	{
		cout << "Error opening file. The program will now abort.\n";
		exit(EXIT_FAILURE);
	}

	strcpy(checkID.departmentID, departmentInfo.departmentID);

	dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));			// read operation reads currently pointed-to structure AND MOVES pointer DOWN ONE STRUCTURE
	while (!dptRecords.eof() && deptIndex < currentDept)
	{
		while (strcmp(checkID.departmentID, departmentInfo.departmentID) == 0)		//COMPARE C STRING
		{
			cout << "That Department ID already exists! Please enter a different department ID.\n";
			cout << "Department ID: ";
			getline(cin, input);
			strcpy(checkID.departmentID, input.c_str());
			for (int index = 0; index < currentDept; index++)
			{
				dptRecords.seekg(sizeof(departmentInfo) * index);
				dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
				if (strcmp(checkID.departmentID, departmentInfo.departmentID) == 0)
				{
					break;
				}
			}
		}
		dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
		deptIndex++;
	}

	strcpy(departmentInfo.departmentID, checkID.departmentID);

}

/* --------------------------------------------3.) EDIT DEPARTMENT-------------------------------------------- */
void editDepartment(Department& departmentInfo, Department* departmentPointer, const int currentDept)
{
	if (currentDept == 0)
	{
		cout << "There are currently no records on file. Please select option 1 to \"Create a Department\".\n\n";
	}

	else if (currentDept > 0)
	{
		departmentPointer = &departmentInfo;
		Department edit = { "N/A", "N/A", "N/A" };
		string input;			// user input
		
								// open file for binary reading 
		fstream editDpt("departments.dat", ios::in | ios::out | ios::binary);
		// check for valid file
		if (!editDpt)
		{
			cout << "Error opening file. The program will now abort.\n";
			exit(EXIT_FAILURE);
		}

		departmentRecords(departmentInfo, currentDept);

		// move to desired department and read it 
		cout << "Please enter the department ID of the department you want to edit: ";
		cin.ignore();
		getline(cin, input);
		strcpy(edit.departmentID, input.c_str());

		while (strcmp(edit.departmentID, departmentInfo.departmentID) != 0)
		{
			for (int index = 0; index < currentDept; index++)
			{
				editDpt.seekg(sizeof(departmentInfo) * index);
				editDpt.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
				if (strcmp(edit.departmentID, departmentInfo.departmentID) == 0)		//COMPARE C STRING
				{
					break;
				}
			}
			if (strcmp(edit.departmentID, departmentInfo.departmentID) != 0)
			{
				cout << "That Department ID does not exist! Please enter a valid Department ID.\n";
				cout << "Department ID: ";
				getline(cin, input);
				strcpy(edit.departmentID, input.c_str());
			}
		}

		// get new data from user and edit in-memory department record
		cout << "Old Department Name: ";
		cout << departmentInfo.departmentName << endl;
		cout << "New Department Name: ";
		getline(cin, input);
		strcpy(departmentPointer->departmentName, input.c_str());
		cout << "\nOld Department Head Name: ";
		cout << departmentInfo.departmentHeadName << endl;
		cout << "New Department Head Name: ";
		getline(cin, input);
		strcpy(departmentPointer->departmentHeadName, input.c_str());

		streamoff posWrite = editDpt.tellg();										// sets position where next charater is to be inserted into the output stream
		editDpt.seekp(posWrite - sizeof(departmentInfo));

		editDpt.write(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
		editDpt.close();
	}
}

/* --------------------------------------------5.) DISPLAY DEPARTMENT RECORDS-------------------------------------------- */
void departmentRecords(Department departmentInfo, const int currentDept)			// ALL DEPARTMENT RECORDS
{
	// open file for binary reading 
	fstream dptRecords("departments.dat", ios::in | ios::binary);
	// check for valid file
	if (currentDept == 0)
	{
		cout << "\nDEPARTMENT RECORDS\n";
		cout << "------------------\n";
		cout << "There are currently no records on file. \nPlease select option 1 to \"Create a Department\".\n\n";
	}

	else if (!dptRecords && currentDept > 0)
	{
		cout << "Error opening file. The program will now abort.\n";
		exit(EXIT_FAILURE);
	}

	else if (currentDept > 0)
	{
		// DEPARTMENT RECORDS
		cout << "\nDEPARTMENT RECORDS\n";
		cout << "------------------\n";
		dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
		while (!dptRecords.eof())
		{
			cout << "Department ID: " << departmentInfo.departmentID << endl;
			cout << "Department Name: " << departmentInfo.departmentName << endl;
			cout << "Department Head Name: " << departmentInfo.departmentHeadName << endl;
			cout << endl;
			dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
		}
	}

	dptRecords.close();
}

/*////////////////////////////////////////////////////////////////
						EMPLOYEES
////////////////////////////////////////////////////////////////*/

/* --------------------------------------------DETERMINE NUMBER OF EMPLOYEES IN FILE-------------------------------------------- */
void countEmpl(Employee employeeInfo, int& currentEmpl)
{
	int numOfEmpl = 0;

	// open file for binary reading 
	fstream readFile("employees.dat", ios::in | ios::binary);
	// check for existing file
	if (!readFile)
	{
		currentEmpl = 0;
	}

	else
	{
		// DEPARTMENT RECORDS
		readFile.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
		while (!readFile.eof())
		{
			readFile.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
			numOfEmpl++;
		}
		currentEmpl = numOfEmpl;
	}

	readFile.close();
}

/* --------------------------------------------2.) CREATE EMPLOYEE FUNCTION-------------------------------------------- */
void createEmployee(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl, Department& departmentInfo, Department* departmentPointer, const int currentDept)
{
	string inputString;		// used to read strings
	double inputDouble;		// used to read doubles
	int inputInt;		// used to read doubles

	// create Employee file object and open file
	fstream createEmpl("employees.dat", ios::out | ios::app | ios::binary);			// if file does not exist, empty file of given name is created
	if (!createEmpl)
	{
		cout << "Error opening file. Program will now abort.";
		exit(EXIT_FAILURE);
	}

	// collect all information about a department
	cout << "\n\n---CREATE AN EMPLOYEE---\n";
	cout << "Please fill out the following information for the employee." << endl;
	cout << "Employee ID: ";
	cin.ignore();
	getline(cin, inputString);
	strcpy(employeePointer->employeeID, inputString.c_str());

	/// make sure employeeID does NOT already exist 
	// IF it does NOT, insert Employee object into the file
	if (currentEmpl != 0)
	{
		checkEmplID(employeeInfo, employeePointer, currentEmpl);
	}

	// if id is good, continue and create object 
	cout << "Employee Name: ";
	getline(cin, inputString);
	strcpy(employeePointer->employeeName, inputString.c_str());

	cout << "Employee Salary: $";
	cin >> inputDouble;
	employeePointer->employeeSalary = inputDouble;
	
	cout << "Employee Age: ";
	cin >> inputInt;
	employeePointer->employeeAge = inputInt;

	cout << "Employee Department ID: ";
	cin.ignore();
	getline(cin, inputString);
	strcpy(employeePointer->employeeDepartmentID, inputString.c_str());

	// CHECK EMPLOYEE'S DEPARTMENT ID
	checkEmplDptID(employeeInfo, employeePointer, currentEmpl, departmentInfo, departmentPointer, currentDept);
	
	createEmpl.write(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
	createEmpl.close();

	cout << endl;
}

/* --------------------------------------------CHECK EMPLOYEE IDS-------------------------------------------- */
void checkEmplID(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl)
{
	employeePointer = &employeeInfo;
	Employee checkID = { "N/A", "N/A", 0, 0, "N/A" };
	string input;		// used to read strings
	int emplIndex = 0;	// number of previous departments before the one being created

						// open file for binary reading 
	fstream emplRecords("employees.dat", ios::in | ios::out | ios::binary);
	// check for valid file
	if (!emplRecords)
	{
		cout << "Error opening file. The program will now abort.\n";
		exit(EXIT_FAILURE);
	}

	strcpy(checkID.employeeID, employeeInfo.employeeID);

	emplRecords.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));			// read operation reads currently pointed-to structure AND MOVES pointer DOWN ONE STRUCTURE
	while (!emplRecords.eof() && emplIndex < currentEmpl)
	{
		while (strcmp(checkID.employeeID, employeeInfo.employeeID) == 0)		//COMPARE C STRING
		{
			cout << "That Employee ID already exists! Please enter a different Employee ID.\n";
			cout << "Employee ID: ";
			getline(cin, input);
			strcpy(checkID.employeeID, input.c_str());
			for (int index = 0; index < currentEmpl; index++)
			{
				emplRecords.seekg(sizeof(employeeInfo) * index);
				emplRecords.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
				if (strcmp(checkID.employeeID, employeeInfo.employeeID) == 0)
				{
					break;
				}
			}
		}
		emplRecords.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
		emplIndex++;
	}

	strcpy(employeeInfo.employeeID, checkID.employeeID);
}

/* --------------------------------------------CHECK EMPLOYEE DEPARTMENT IDS-------------------------------------------- */
void checkEmplDptID(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl, Department& departmentInfo, Department* departmentPointer, const int currentDept)
{
	Employee checkID = { "N/A", "N/A", 0, 0, "N/A" };
	string input;		// used to read strings
		
	// open Employees file for binary reading 
	fstream emplRecords("employees.dat", ios::in | ios::out | ios::binary);
	// check for valid file
	if (!emplRecords)
	{
		cout << "Error opening file. The program will now abort.\n";
		exit(EXIT_FAILURE);
	}

	// open Departments file for binary reading 
	fstream dptRecords("departments.dat", ios::in | ios::out | ios::binary);
	// check for valid file
	if (!dptRecords)
	{
		cout << "Error opening file. The program will now abort.\n";
		exit(EXIT_FAILURE);
	}

	// WHAT TO CHECK 
	strcpy(checkID.employeeDepartmentID, employeeInfo.employeeDepartmentID);
	
	while (strcmp(checkID.employeeDepartmentID, departmentInfo.departmentID) != 0)		//COMPARE C STRING
	{
		for (int index = 0; index < currentDept; index++)
		{
			dptRecords.seekg(sizeof(departmentInfo) * index);
			dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
			if (strcmp(checkID.employeeDepartmentID, departmentInfo.departmentID) == 0)
			{
				break;
			}
		}
		if (strcmp(checkID.employeeDepartmentID, departmentInfo.departmentID) != 0)
		{
			cout << "That Department ID does not exist! Please enter a valid Department ID.\n";
			cout << "Department ID: ";
			getline(cin, input);
			strcpy(checkID.employeeDepartmentID, input.c_str());
		}
	}
	
	strcpy(employeeInfo.employeeDepartmentID, checkID.employeeDepartmentID);
}

/* --------------------------------------------4.) EDIT EMPLOYEE-------------------------------------------- */
void editEmployee(Employee& employeeInfo, Employee* employeePointer, const int currentEmpl, const int currentDept)
{
	if (currentDept == 0)
	{
		cout << "\nThere are currently no Departments on file. \nPlease select option 1 to \"Create a Department\" before you create an employee.\n\n";
	}

	else if (currentEmpl == 0)
	{
		cout << "\nThere are currently no records on file. \nPlease select option 2 to \"Create an Employee\".\n\n";
	}

	else if (currentEmpl > 0)
	{
		employeePointer = &employeeInfo;
		Employee edit = { "N/A", "N/A", 0, 0, "N/A" };
		string input;			// user input

								// open file for binary reading 
		fstream editEmpl("employees.dat", ios::in | ios::out | ios::binary);
		// check for valid file
		if (!editEmpl)
		{
			cout << "Error opening file. The program will now abort.\n";
			exit(EXIT_FAILURE);
		}

		employeeRecords(employeeInfo, currentEmpl);

		// move to desired department and read it 
		cout << "Please enter the employee ID of the employee you want to edit: ";
		cin.ignore();
		getline(cin, input);
		strcpy(edit.employeeID, input.c_str());

		while (strcmp(edit.employeeID, employeeInfo.employeeID) != 0)
		{
			for (int index = 0; index < currentEmpl; index++)
			{
				editEmpl.seekg(sizeof(employeeInfo) * index);
				editEmpl.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
				if (strcmp(edit.employeeID, employeeInfo.employeeID) == 0)		//COMPARE C STRING
				{
					break;
				}
			}
			if (strcmp(edit.employeeID, employeeInfo.employeeID) != 0)
			{
				cout << "That Employee ID does not exist! Please enter a valid Employee ID.\n";
				cout << "Employee ID: ";
				getline(cin, input);
				strcpy(edit.employeeID, input.c_str());
			}
		}
		// get new data from user and edit in-memory department record
		cout << "Old Employee Name: ";
		cout << employeeInfo.employeeName << endl;
		cout << "New Employee Name: ";
		getline(cin, input);
		strcpy(employeePointer->employeeName, input.c_str());

		cout << "\nOld Employee Salary: $";
		cout << employeeInfo.employeeSalary;
		cout << "\nNew Employee Salary: $";
		double inputDouble;
		cin >> inputDouble;
		employeePointer->employeeSalary = inputDouble;

		cout << "\nOld Employee Age: ";
		cout << employeeInfo.employeeAge;
		cout << "\nNew Employee Age: ";
		int inputInt;
		cin >> inputInt;
		employeePointer->employeeAge = inputInt;

		streamoff posWrite = editEmpl.tellg();										// sets position where next charater is to be inserted into the output stream
		editEmpl.seekp(posWrite - sizeof(employeeInfo));

		editEmpl.write(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
		editEmpl.close();
	}
}

/* --------------------------------------------6.) DISPLAY EMPLOYEE RECORDS-------------------------------------------- */
void employeeRecords(Employee employeeInfo, const int currentEmpl)			// ALL EMPLOYEE RECORDS
{
	cout << fixed << showpoint << setprecision(2);
	// open file for binary reading 
	fstream emplRecords("employees.dat", ios::in | ios::binary);
	// check for valid file
	if (currentEmpl == 0)
	{
		cout << "\nEMPLOYEE RECORDS\n";
		cout << "------------------\n";
		cout << "There are currently no records on file. \nPlease select option 2 to \"Create an Employee\".\n\n";
	}

	else if (!emplRecords && currentEmpl > 0)
	{
		cout << "Error opening file. The program will now abort.\n";
		exit(EXIT_FAILURE);
	}

	else if (currentEmpl > 0)
	{
		// EMPLOYEE RECORDS
		cout << "\nEMPLOYEE RECORDS\n";
		cout << "------------------\n";
		emplRecords.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
		while (!emplRecords.eof())
		{
			cout << "Employee ID: " << employeeInfo.employeeID << endl;
			cout << "Employee Name: " << employeeInfo.employeeName << endl;
			cout << "Employee Salary: $" << employeeInfo.employeeSalary << endl;
			cout << "Employee Age: " << employeeInfo.employeeAge << endl;
			cout << "Employee's Department ID: " << employeeInfo.employeeDepartmentID << endl;
			cout << endl;
			emplRecords.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
		}
	}
	
	emplRecords.close();
}

/* --------------------------------------------7.) DISPLAY SALARY REPORT-------------------------------------------- */
void salaryReport(Department departmentInfo, Employee employeeInfo, const int currentDept, const int currentEmpl)
{
	cout << fixed << showpoint << setprecision(2);
	double totalSalary = 0.00;
	
	fstream dptRecords("departments.dat", ios::in | ios::binary);
	fstream emplRecords("employees.dat", ios::in | ios::binary);

	if (currentDept == 0)
	{
		cout << "A salary report cannot be generated as there are currently no department records on file. \nPlease select option 1 to \"Create an Department\".\n\n";
	}
	else if (currentEmpl == 0)
	{
		cout << "There are currently no employee records on file. Please select option 2 to \"Create an Employee\".";

		cout << "\n\n\n                    Salary Report: Total Salary Paid for Each Department\n";
		cout << "---------------------------------------------------------------------------------------------\n";
		cout << left << setw(25) << "Department Name:" << left << setw(25) << "Department ID:" << left << setw(25) << "Department Head:" << "Total Salary Paid:" << endl;
		for (int deptIndex = 0; deptIndex < currentDept; deptIndex++)
		{
			dptRecords.seekg(sizeof(departmentInfo) * deptIndex);
			dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
			cout << left << setw(25) << departmentInfo.departmentName << left << setw(25) << departmentInfo.departmentID << left << setw(25) << departmentInfo.departmentHeadName << "$ " << totalSalary << endl;
		}
		cout << endl;
	}
	else if (currentDept > 0 && currentEmpl >0)
	{
		cout << "\n\n\n                    Salary Report: Total Salary Paid for Each Department\n";
		cout << "---------------------------------------------------------------------------------------------\n";
		cout << left << setw(25) << "Department Name:" << left << setw(25) << "Department ID:" << left << setw(25) << "Department Head:" << "Total Salary Paid:" << endl;
		for (int deptIndex = 0; deptIndex < currentDept; deptIndex++)
		{
			totalSalary = 0.00;
			dptRecords.seekg(sizeof(departmentInfo) * deptIndex);
			dptRecords.read(reinterpret_cast<char *>(&departmentInfo), sizeof(departmentInfo));
			for (int emplIndex = 0; emplIndex < currentEmpl; emplIndex++)
			{
				emplRecords.seekg(sizeof(employeeInfo) * emplIndex);
				emplRecords.read(reinterpret_cast<char *>(&employeeInfo), sizeof(employeeInfo));
				if (strcmp(departmentInfo.departmentID, employeeInfo.employeeDepartmentID) == 0)
				{
					totalSalary += employeeInfo.employeeSalary;
				}
			}
			cout << left << setw(25) << departmentInfo.departmentName << left << setw(25) << departmentInfo.departmentID << left << setw(25) << departmentInfo.departmentHeadName << "$ " << totalSalary << endl;
		}
		cout << endl;
	}
}
