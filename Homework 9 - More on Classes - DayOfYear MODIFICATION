// Samantha Hangsan
// ID: 900029599
// CS 939 - Homework 9
// CHAPTER 11, EXERCISE 3
// DAY OF THE YEAR MODIFICATION

// MODIFICATION
	// add constructor that takes two parameters: string representing month and integer in range 0 through 31 representing day of month
	// constructor initializes integer member of class to represent day specified by the month and day of month parameters
	
	// constructor terminates program with error message if number entered for a day is outside range of days for month given
	
	// add the following overloaded operators: 
	// ++ prefixx and postfix increment operators
	// operators should modify DayOfYear object, so that it represents the next day
	// if day is already the end of the year, new vaoue of object will represent first day of next year
	// -- prefix and postfix decrement operators
	// operators should modify DayOfYear object, so that it represents the previous day
	// if the day is already the first day of the year, the new value of the object will represent the last day of the year


#include <iostream>
#include <string>
using namespace std;

// assuming a year has 365 day, write a class named DayOfYear 
// that takes an integer representing a day of the year 
// and translates it to a string consisting of the month
// followed by the day of the month 



class DayOfYear
{
private:
	int day;							// integer member variable to repesent day
	string monthUser;
	int numDays;
	static string month[12];			// static member variables of type string to assist in the translation from integer format to month-day format
	static int daysOfMonth[12];	

public:
	// Default constructor
	DayOfYear() { monthUser = "";  day = 0; }
	// constructor for class should take as parameter an integer 
	// that represents the day of the year
	
	// add constructor that takes two parameters: string representing month and integer in range 0 through 31 representing day of month
	DayOfYear(string month, int d);
	void print();				// member function print(): print the day in the month-day format
	bool validDay;

	// overloaded prefix ++ operator
	DayOfYear operator++();
	// overloaded postfix ++ operator
	DayOfYear operator++(int);
	
	// overloaded prefix -- operator
	DayOfYear operator--();
	// overloaded postfix -- operator
	DayOfYear operator--(int);

};

// initialize months 
string DayOfYear::month[12] = { "January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December" };

// initialize days of month
int DayOfYear::daysOfMonth[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

DayOfYear::DayOfYear(string m, int d)
{
	day = d;
	numDays = 0;
	validDay = true;

	int monthDaysIndex, monthDays;		// number of days in that month
	// constructor initializes integer member of class to represent day specified by the month and day of month parameters
	for (int index = 0; index < 12; index++)
	{
		if (m == month[index])
		{
			monthUser = m;
			monthDaysIndex = index;
			break;
		}
	}

	// determine number of days in that month
	monthDays = daysOfMonth[monthDaysIndex];

	int initial = 0; // add days of months

	for (int index = 0; index < 12; index++)
	{
		if (day < (initial + (daysOfMonth[index] + 1)))		// example: 32 = February 1st
		{
			numDays = day - initial;									// example: 32 - 31 = 1
			break;
		}
		initial += daysOfMonth[index];						// example: initial = 0 + 31
	}

	if (monthUser != m)
	{
		cout << "ERROR: the month entered is not valid\n";
		validDay = false;
	}
	
	// constructor terminates program with error message if number entered for a day is outside range of days for month given
	else if (numDays <= 0 || numDays > monthDays)
	{
		cout << "ERROR: the number entered is outside the range of days for the month given.\n";
		validDay = false;
	}
}

// overloaded prefix ++ operator
DayOfYear DayOfYear::operator++()
{
	numDays++;
	return *this;
}

// overloaded postfix ++ operator
DayOfYear DayOfYear::operator++(int)
{
	DayOfYear temp = *this;
	numDays++;
	return temp;
}

// overloaded prefix -- operator
DayOfYear DayOfYear::operator--()
{
	numDays--;
	return *this;
}

// overloaded postfix ++ operator
DayOfYear DayOfYear::operator--(int)
{
	DayOfYear temp = *this;
	numDays--;
	return temp;
}

void DayOfYear::print()
{
	if (monthUser == month[0] && numDays == 1)
	{
		monthUser = month[12];
		numDays = 32;
	}
	// print month-day format
	cout << "Day before date entered: " << monthUser << " " << numDays--;
	cout << "\nDate entered: " << monthUser << " " << ++numDays;			// example: February 1
	if (monthUser == month[12] && numDays == daysOfMonth[12])
	{
		monthUser = month[0]; 
		numDays = 0;
	}
	cout << "\nDay after date entered: " << monthUser << " " << numDays++;
}

int main()
{
	string monthUser;
	int dayUser;
	cout << "Please enter the month and day of the month (between 1 through 31), and this program will return it in month-day format.\n\n";
	cout << "Example:\nUSER INPUT:\n32" << endl;
	DayOfYear Date("February", 32);
	cout << "\n\nPROGRAM OUTPUT: \n";
	Date.print();
	cout << "\n\n";

	cout << "Enter the month: ";
	cin >> monthUser;

	cout << "Enter the day of the month: ";
	cin >> dayUser;

	if (Date.validDay == true)
	{
		DayOfYear Date(monthUser, dayUser);
		Date.print();
		cout << endl;
	}

	system("pause");
	return 0;
}
