// Samantha Hangsan
// ID: 900029599
// CS 939 
// MIDTERM


#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

///* --------------------------------------------DEPARTMENT CLASS-------------------------------------------- *///
class Department
{
	public:
	string departmentID;
	string departmentName;
	string departmentHeadName;
	// DEFAULT CONSTRUCTOR
	Department()
	{
		departmentID = "";
		departmentName = "";
		departmentHeadName = "";
	}

	Department(string id, string name, string head)
	{
		departmentID = id;
		departmentName = name;
		departmentHeadName = head;
	}

};

///* --------------------------------------------DEPARTMENTARRAY STRUCT-------------------------------------------- *///
const int MAX_DEPT = 3;
struct DepartmentArray
{
	Department departmentInfo[MAX_DEPT];
	
	// PROTOTYPES
	void createDepartment(int currentDept);
};

void DepartmentArray::createDepartment(int currentDept)
{
	// create Department
	// collect all information about a department
		
	
	if (currentDept < MAX_DEPT)
	{
		cout << "\n\n---CREATE A DEPARTMENT---\n";
		cout << "Please fill out the following information for the department." << endl;
		cout << "Department ID: ";
		cin.ignore();
		getline(cin, departmentInfo[currentDept].departmentID);
		
		/// make sure departmentID does NOT already exist in the array containing Department objects
		// IF it does NOT, insert Department object into the array
		if (currentDept != 0)
		{
			for (int previous = 0; previous < currentDept; previous++)
			{
				while (departmentInfo[currentDept].departmentID == departmentInfo[previous].departmentID)
				{
					cout << "That Department ID already exists! Please enter a different department ID.\n";
					cout << "Department ID: ";
					cin.ignore();
					getline(cin, departmentInfo[currentDept].departmentID);
				}
			}

		}
		// if id is good, continue and create object in array
		cout << "Department Name: ";
		getline(cin, departmentInfo[currentDept].departmentName);

		cout << "Name of the Head of the Department: ";
		getline(cin, departmentInfo[currentDept].departmentHeadName);
	}

}

///* --------------------------------------------EMPLOYEE CLASS-------------------------------------------- *///

class Employee
{
	
public:
	// member variables
	string employeeID;
	string employeeName;
	double employeeSalary;
	int employeeAge;
	string employeeDepartmentID;

	// DEFAULT CONSTRUCTOR
	Employee()
	{
		employeeID = "";
		employeeName = "";
		employeeSalary = 0.00;
		employeeAge = 0;
	}

};

///* --------------------------------------------EMPLOYEEARRAY STRUCT-------------------------------------------- *///
const int MAX_EMPLOYEE = 7;
struct EmployeeArray
{
	Employee employeeInfo[MAX_EMPLOYEE];

	// PROTOTYPES
	void createEmployee(int currentEmpl, DepartmentArray dptAccess);
};

void EmployeeArray::createEmployee(int currentEmpl, DepartmentArray dptAccess)
{
	// create Department
	// collect all information about a department

	if (currentEmpl < MAX_EMPLOYEE)
	{
		cout << "\n\n---CREATE AN EMPLOYEE---\n";
		cout << "Please fill out the following information for the employee." << endl;
		cout << "Employee ID: ";
		cin.ignore();
		getline(cin, employeeInfo[currentEmpl].employeeID);

		/// make sure departmentID does NOT already exist in the array containing Department objects
		// IF it does NOT, insert Department object into the array
		if (currentEmpl != 0)
		{
			for (int previous = 0; previous < currentEmpl; previous++)
			{
				while (employeeInfo[currentEmpl].employeeID == employeeInfo[previous].employeeID)
				{
					cout << "That Employee ID already exists! Please enter a different Employee ID.\n";
					cout << "Employee ID: ";
					cin.ignore();
					getline(cin, employeeInfo[currentEmpl].employeeID);
				}
			}
		}
		// if id is good, continue and create object in array
		cout << "Employee Name: ";
		getline(cin, employeeInfo[currentEmpl].employeeName);

		cout << "Employee Salary: $";
		cin >> employeeInfo[currentEmpl].employeeSalary;

		cout << "Employee Age: ";
		cin >> employeeInfo[currentEmpl].employeeAge;

		cout << "Employee Department ID: ";
		cin.ignore();
		getline(cin, employeeInfo[currentEmpl].employeeDepartmentID);
		
		bool match = false;
		
		while (match == false)
		{
			for (int previous = 0; previous < MAX_DEPT && match == false; previous++)
			{
				if (employeeInfo[currentEmpl].employeeDepartmentID == dptAccess.departmentInfo[previous].departmentID)
				{
					match = true;
				}
				else
				{
					match = false;
				}
			}

			if (match == false)
			{
				cout << "That Department ID does not exist! Please enter a valid Employee Department ID.\n";
				cout << "Employee Department ID: ";
				cin.ignore();
				getline(cin, employeeInfo[currentEmpl].employeeDepartmentID);	
			}
		}	
	}
}

/* --------------------------------------------CLIENT PROGRAM-------------------------------------------- */

// PROTOTYPES 
void displayMenu();
//void createEmployee();			// OPTION 2
void chooseOption(int& currentDpt, DepartmentArray& dptAccess, int& currentEmpl, EmployeeArray& emplAccess);
//void writeData();				// OPTION 3
//void retrieveData();			// OPTION 4
//void displayReport();			// OPTION 5

int main()
{
	char anotherOption;
	int currentDept = 0;
	int currentEmployee = 0;
	DepartmentArray departmentAccess;
	EmployeeArray employeeAccess;

	cout << "Choose from the menu below using options 1 through 5. \n\n";
	do
	{
		displayMenu();
		chooseOption(currentDept, departmentAccess, currentEmployee, employeeAccess);
		cout << "Would you like to select another option? Enter Y for yes or N for no: ";
		cin >> anotherOption;

		while (anotherOption != 'Y' && anotherOption != 'y' && anotherOption != 'N' && anotherOption != 'n')
		{
			cout << "Press Y for yes or N for No: ";
			cin >> anotherOption;
		}
		cout << endl;
	
	} while (anotherOption != 'N' && anotherOption != 'n');



	// write data to the file, when the user selects this option, dump the info in each array into a separate file
	// RETRIEVE data from file
	// when user selects this OPTION
	// open each file, load the data from the file into the appropriate array
	// DISPLAY REPORT:
	// when user selects this OPTION
	// go through arrays and display TOTAL SALARY paid for each department
	// IF user tries to exit program without saving file
	// ALERT user that data has not been saved and will be lost
	// Proceed only if user consents

	system("pause");
	return 0;
}

void displayMenu()
{
	cout << "MENU\n";
	cout << "----\n";
	cout << "1. Create Department\n";
	cout << "2. Create Employee\n";
	cout << "3. Write the data to the file\n";
	cout << "4. Retrieve data from file\n";
	cout << "5. Display Report\n";
}

void chooseOption(int& currentDpt, DepartmentArray& dptAccess, int& currentEmpl, EmployeeArray& emplAccess)
{
	
	
	int choice;
	cout << "Enter selection: ";
	cin >> choice;
	// IF patron selects a drink
	// buyDrink class member function is called to handle the actual sale
	// function should be passed the patron's drink choice
	switch (choice)
	{
	case 1:
	{
			if (currentDpt < MAX_DEPT)
			{
				dptAccess.createDepartment(currentDpt);		// number of stored items (max is 3)
				currentDpt++;
			}
			else
			{
				// when array is fully, display error message to the user "The array is full, you can not add any more departments"
				if (currentDpt == MAX_DEPT)
				{
					cout << "ERROR: The array is full, you can not add any more departments!\n";
				}
			}
			break;
	}
	case 2:
	{
		if (currentEmpl < MAX_EMPLOYEE)
		{
			emplAccess.createEmployee(currentEmpl, dptAccess);		// number of stored items (max is 7)
			currentEmpl++;
		}
		else
		{
			// when array is fully, display error message to the user "The array is full, you can not add any more employees"
			if (currentEmpl == MAX_DEPT)
			{
				cout << "ERROR: The array is full, you can not add any more employees!\n";
			}
		}
		break;
	}
	case 3:
	{
		 break;
	}
	case 4:
	{
		 break;
	}
	case 5:
	{
		 break;
	}
		// INPUT VALIDATION: only accept valid menu choices 
	default:
	{
		cout << "\nSelect a valid option.\n";
		break;
	}
	}
}

void checkId(string id)
{

}











void displayReport()
{

}
